package com.example.chatbirdfinal.Adapter;import android.content.Context;import android.content.SharedPreferences;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.TextView;import androidx.annotation.NonNull;import androidx.fragment.app.FragmentActivity;import androidx.recyclerview.widget.RecyclerView;import com.bumptech.glide.Glide;import com.example.chatbirdfinal.Fragment.PostDetailFragment;import com.example.chatbirdfinal.Fragment.ProfileFragment;import com.example.chatbirdfinal.Model.Notification;import com.example.chatbirdfinal.Model.Post;import com.example.chatbirdfinal.Model.User;import com.example.chatbirdfinal.R;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.ValueEventListener;import java.util.List;public class NotificationAdapter extends RecyclerView.Adapter<NotificationAdapter.ViewHolder> {    private Context mcontext;    private List<Notification> mNotification;    public NotificationAdapter(Context mcontext, List<Notification> mNotification) {        this.mcontext = mcontext;        this.mNotification = mNotification;    }    @NonNull    @Override    public ViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) {        View view = LayoutInflater.from(mcontext).inflate(R.layout.notification_item,viewGroup, false);        return new NotificationAdapter.ViewHolder(view);    }    @Override    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {        final Notification notification = mNotification.get(position);        holder.text.setText(notification.getText());        getUserInfo(holder.image_profile, holder.username, notification.getUserid());        if (notification.isPost()) {            holder.post_image.setVisibility(View.VISIBLE);            getPostImage(holder.post_image, notification.getPostid());        } else {            holder.post_image.setVisibility(View.GONE);        }        holder.itemView.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                if (notification.isPost()) {                    SharedPreferences.Editor editor = mcontext.getSharedPreferences("PREFS", Context.MODE_PRIVATE).edit();                    editor.putString("postid", notification.getPostid());                    editor.apply();                    ((FragmentActivity)mcontext).getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container,                            new PostDetailFragment()).commit();                } else {                    SharedPreferences.Editor editor = mcontext.getSharedPreferences("PREFS", Context.MODE_PRIVATE).edit();                    editor.putString("profileid", notification.getUserid());                    editor.apply();                    ((FragmentActivity)mcontext).getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container,                            new ProfileFragment()).commit();                }            }        });    }    @Override    public int getItemCount() {        return mNotification.size();    }    public class ViewHolder extends RecyclerView.ViewHolder{        public ImageView image_profile,post_image;        public TextView username,text;        public ViewHolder(@NonNull View itemView) {            super(itemView);            image_profile = itemView.findViewById(R.id.image_profile);            post_image = itemView.findViewById(R.id.post_image);            username = itemView.findViewById(R.id.username);            text = itemView.findViewById(R.id.comment);        }    }    private void getUserInfo(final ImageView imageView, final TextView username, String publisherid){        DatabaseReference reference = FirebaseDatabase.getInstance().getReference()                .child("Users").child(publisherid);        reference.addListenerForSingleValueEvent(new ValueEventListener() {            @Override            public void onDataChange(DataSnapshot dataSnapshot) {                User user = dataSnapshot.getValue(User.class);                Glide.with(mcontext).load(user.getImageurl()).into(imageView);                username.setText(user.getUsername());            }            @Override            public void onCancelled(DatabaseError databaseError) {            }        });    }    private void getPostImage(final ImageView post_image, String postid){        DatabaseReference reference = FirebaseDatabase.getInstance().getReference()                .child("Posts").child(postid);        reference.addListenerForSingleValueEvent(new ValueEventListener() {            @Override            public void onDataChange(DataSnapshot dataSnapshot) {                Post post = dataSnapshot.getValue(Post.class);                Glide.with(mcontext).load(post.getPostimage()).into(post_image);            }            @Override            public void onCancelled(DatabaseError databaseError) {            }        });    }}